drop table Categoria cascade constraints;
drop table Temporada cascade constraints;
drop table Equip cascade constraints;
drop table Jugador cascade constraints;
drop table Membre cascade constraints;
drop table Usuari cascade constraints;

CREATE TABLE Categoria (
    id_cat NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom VARCHAR(50) UNIQUE  NOT NULL,
    edat_min INT CONSTRAINT ck_edat_min_comanda CHECK (edat_min >= 0) NOT NULL,
    edat_max INT CONSTRAINT ck_edat_max_comanda CHECK (edat_max > 0),
  CONSTRAINT ck_edats_cate CHECK (edat_min <= edat_max));

CREATE TABLE Temporada (
    anny INT PRIMARY KEY  constraint any_ck_temporada CHECK (anny >= 1900));

CREATE TABLE Equip (
    Id_equip NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom VARCHAR(50) NOT NULL,
    tipus VARCHAR(1) CONSTRAINT ck_tipus_equip CHECK (tipus  IN ('D','H','M')) NOT NULL,
    any_eq INT constraint ck_any_equip CHECK (any_eq >= 1900) NOT NULL,
    cate number  NOT NULL
 );
ALTER TABLE Equip ADD constraint fk_cat_tipus FOREIGN KEY(cate) references Categoria(id_cat);
ALTER TABLE Equip ADD constraint fk_temp_any FOREIGN KEY(any_eq) references Temporada(anny);

CREATE INDEX idx_equip_nom ON Equip(nom);

CREATE TABLE Jugador (
    id_jug NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom VARCHAR(50) NOT NULL,
    cognoms VARCHAR(100) NOT NULL,
    sexe CHAR(1) NOT NULL,
    data_naix DATE NOT NULL,
    id_legal VARCHAR(20) UNIQUE,
    IBAN VARCHAR(34) NOT NULL,
    any_fi_revisio_medica INT constraint any_ck_jugador CHECK (any_fi_revisio_medica >= 1900)  NOT NULL,
    adreca VARCHAR(200) NOT NULL,
    codi_postal VARCHAR(5) NOT NULL,
    poblacio VARCHAR(200) NOT NULL,
    foto VARCHAR(200) NOT NULL,
    provincia VARCHAR(200) NOT NULL,
    pais VARCHAR(200) NOT NULL,
    CONSTRAINT ck_sexe CHECK (sexe IN ('H', 'D')) 
);

CREATE TABLE MEMBRE(
    Id_equip_mem NUMBER NOT NULL,
    Id_jug_mem Number NOT NULL,
    titular VARCHAR(1) CONSTRAINT ck_titular_membre CHECK (titular IN ('S', 'N')) NOT NULL,
   FOREIGN KEY (id_equip_mem) REFERENCES Equip(Id_equip),
   FOREIGN KEY (id_jug_mem) REFERENCES Jugador(id_jug),
   primary key (id_equip_mem,id_jug_mem)
);

CREATE TABLE Usuari (
    login VARCHAR(50) PRIMARY KEY,
    nom_usu VARCHAR(50) NOT NULL,
    password VARCHAR(60) NOT NULL,
    CONSTRAINT ck_password CHECK (LENGTH(password) >= 6)
);




CREATE OR REPLACE TRIGGER trig_equip_temp
BEFORE INSERT OR UPDATE ON Equip
FOR EACH ROW
DECLARE
    v_veg NUMBER;
BEGIN
    
    SELECT COUNT(*)
    INTO v_veg
    FROM Equip
    WHERE nom = :NEW.nom
    AND any_eq = :NEW.any_eq and
    :NEW.Id_equip != Id_equip;

    
    IF v_veg > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ja existeix un equip amb el mateix nom en aquesta temporada.');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER trig_elim_equip
BEFORE DELETE ON Equip
FOR EACH ROW
DECLARE
    v_jug NUMBER;
BEGIN
    
    SELECT COUNT(*)
    INTO v_jug
    FROM MEMBRE
    WHERE Id_equip_mem = :OLD.Id_equip;

    
    IF v_jug > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Hi ha jugadors assignats en aquest equip.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trig_sexe_jug_tip_equip
BEFORE INSERT OR UPDATE ON Membre
FOR EACH ROW
DECLARE
    v_sexe VARCHAR2(1);
    v_tipus VARCHAR2(1);
BEGIN
    SELECT sexe
    INTO v_sexe
    FROM Jugador
    WHERE id_jug = :NEW.Id_jug_mem;

    SELECT tipus
    INTO v_tipus
    FROM Equip
    WHERE Id_equip = :NEW.Id_equip_mem;

    IF (v_sexe = 'H' AND v_tipus = 'D') OR 
       (v_sexe = 'D' AND v_tipus = 'H') THEN
        RAISE_APPLICATION_ERROR(-20003, 'El sexe del jugador no coincideix amb el tipus d''equip.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIG_EDAT_JUG_EQUIP
BEFORE INSERT OR UPDATE ON MEMBRE
FOR EACH ROW
DECLARE
    v_edat_jug NUMBER;
    v_edat_min NUMBER;
    v_edat_max NUMBER;
    v_any_equip NUMBER;
BEGIN
    -- Obtenir l'any de l'equip
    SELECT any_eq
    INTO v_any_equip
    FROM EQUIP
    WHERE Id_equip = :NEW.Id_equip_mem;

    -- Calcular l'edat del jugador basada en l'any de l'equip
    SELECT v_any_equip - EXTRACT(YEAR FROM j.data_naix)
    INTO v_edat_jug
    FROM JUGADOR j
    WHERE j.id_jug = :NEW.Id_jug_mem;

    -- Obtenir les edats mínima i màxima de la categoria de l'equip
    SELECT c.edat_min, c.edat_max
    INTO v_edat_min, v_edat_max
    FROM EQUIP e
    JOIN CATEGORIA c ON e.cate = c.id_cat
    WHERE e.id_equip = :NEW.Id_equip_mem;

    IF :new.titular = 'S' THEN
    -- Comprovar si l'edat del jugador està dins del rang permès
        IF v_edat_jug < v_edat_min THEN
            RAISE_APPLICATION_ERROR(-20001, 'L''edat del jugador és massa petita per l''equip. Anys dif: ' || TO_CHAR(v_edat_min - v_edat_jug));
        ELSIF v_edat_jug > v_edat_max THEN
            RAISE_APPLICATION_ERROR(-20002, 'L''edat del jugador és massa gran per l''equip. Anys dif: ' || TO_CHAR(v_edat_jug - v_edat_max));
        END IF;
    ELSE
        IF v_edat_jug > v_edat_max THEN
            RAISE_APPLICATION_ERROR(-20001, 'L''edat del jugador no correspon a la categoria de l''equip. És massa gran. Anys dif: ' || TO_CHAR(v_edat_jug - v_edat_max));
        END IF;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'No s''han trobat dades del jugador o de l''equip');
END;
/

CREATE OR REPLACE TRIGGER trig_jug
BEFORE INSERT OR UPDATE ON Jugador
FOR EACH ROW
DECLARE
    v_any_actual NUMBER;
    v_anys NUMBER;
    
BEGIN
     v_any_actual := EXTRACT(YEAR FROM SYSDATE);
    v_anys := v_any_actual - EXTRACT(YEAR FROM :NEW.data_naix);
    
    
    
    IF v_anys < 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'L''any és massa gran.');
    ELSIF :NEW.any_fi_revisio_medica < v_any_actual THEN
        RAISE_APPLICATION_ERROR(-20007, 'L''any de la revisió mèdica és inferior a l''any actual.');
    
    END IF;
END;
/


